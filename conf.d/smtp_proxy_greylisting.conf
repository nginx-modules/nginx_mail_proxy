location /smtp_proxy_greylisting {
  autoindex off;
  default_type 'text/plain';

  content_by_lua_block {
    local redis = require "resty.redis"

    local helo   = ngx.var.http_auth_smtp_helo
    local from   = ngx.var.http_auth_smtp_from
    local to     = ngx.var.http_auth_smtp_to
    local ip     = ngx.var.http_client_ip
    local TTL    = 10800 -- 3h
    local within = 120 -- 2m

    local Proxy = "127.0.0.1"
    local Redis = "127.0.0.1"
    local Debug = 0

    function redis_connect_failed()
      smtp_proxy_ok()
      ngx.exit(ngx.HTTP_OK)
    end

    function smtp_proxy_ok()
      ngx.header['Auth-Status'] = 'OK'
      ngx.header['Auth-Port']   = '25'
      ngx.header['Auth-Server'] = Proxy
    end

    function smtp_proxy_ng()
      if Debug == 1 then
        smtp_proxy_ok()
      else
        ngx.header['Auth-Status'] = 'Please try again later.'
      end
    end

    function result_check(ok,err)
      if not ok then
        redis_connect_failed()
      end
    end

    local red = redis:new()
    red:set_timeout(1000) -- 1 sec

    local ok, err = red:connect(Redis,6379)
    result_check(ok,err)

-- TTL 確認
    local ttl, err = red:ttl(ip)
    result_check(ttl,err)

-- 初回アクセスの場合は接続拒否
    if ttl == -2  then
      -- Key と TTL を登録
      ok, err = red:set(ip,"1") 
      result_check(ok,err)
      ok, err = red:expire(ip,TTL)
      result_check(ok,err)
      smtp_proxy_ng()
      log = string.format("smtp_client: %s, ttl: %s, proxy: NG",ip, ttl)
      ngx.log(ngx.ERR,log)
-- ホワイトリストIPの場合は接続許可
    elseif ttl == -1 then
      smtp_proxy_ok()
      log = string.format("smtp_client: %s, ttl: %s, proxy: OK",ip, ttl)
      ngx.log(ngx.ERR,log)
-- TTL時間内の2回目以降のアクセスの場合は接続許可
    elseif ttl > 0 and ttl + within < TTL then
      local res, err = red:get(ip)
      result_check(res,err)
      ok, err = red:set(ip,res + 1) 
      result_check(ok,err)
      ok, err = red:expire(ip,TTL)
      result_check(ok,err)
      smtp_proxy_ok()
      log = string.format("smtp_client: %s, ttl: %s, times: %s, proxy: OK",ip,ttl,res)
      ngx.log(ngx.ERR,log)
-- TTL時間内の2回目以降のアクセスでも within 時間内の場合は接続拒否
    elseif ttl > 0 then
      smtp_proxy_ng()
      log = string.format("smtp_client: %s, ttl: %s, proxy: NG",ip, ttl)
      ngx.log(ngx.ERR,log)
    end
    
    ok, err = red:close()
  }
}
